
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateEventEmitterCpp.js
 */

#include <react/renderer/components/rnjwplayer/EventEmitters.h>


namespace facebook {
namespace react {

void RNJWPlayerEventEmitter::onPlayerReady(OnPlayerReady $event) const {
  dispatchEvent("playerReady", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onPlaylist(OnPlaylist $event) const {
  dispatchEvent("playlist", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    auto playlist = jsi::Array(runtime, $event.playlist.size());
    size_t playlistIndex = 0;
    for (auto playlistValue : $event.playlist) {
      auto playlistObject = jsi::Object(runtime);
      playlistObject.setProperty(runtime, "file", playlistValue.file);

    auto sources = jsi::Array(runtime, playlistValue.sources.size());
    size_t sourcesIndex = 0;
    for (auto sourcesValue : playlistValue.sources) {
      auto sourcesObject = jsi::Object(runtime);
      sourcesObject.setProperty(runtime, "file", sourcesValue.file);
sourcesObject.setProperty(runtime, "label", sourcesValue.label);
sourcesObject.setProperty(runtime, "default", sourcesValue.default);
      sources.setValueAtIndex(runtime, sourcesIndex++, sourcesObject);
    }
    playlistObject.setProperty(runtime, "sources", sources);
  
playlistObject.setProperty(runtime, "image", playlistValue.image);
playlistObject.setProperty(runtime, "title", playlistValue.title);
playlistObject.setProperty(runtime, "description", playlistValue.description);
playlistObject.setProperty(runtime, "mediaId", playlistValue.mediaId);

    auto adSchedule = jsi::Array(runtime, playlistValue.adSchedule.size());
    size_t adScheduleIndex = 0;
    for (auto adScheduleValue : playlistValue.adSchedule) {
      auto adScheduleObject = jsi::Object(runtime);
      adScheduleObject.setProperty(runtime, "tag", adScheduleValue.tag);
adScheduleObject.setProperty(runtime, "offset", adScheduleValue.offset);
      adSchedule.setValueAtIndex(runtime, adScheduleIndex++, adScheduleObject);
    }
    playlistObject.setProperty(runtime, "adSchedule", adSchedule);
  
playlistObject.setProperty(runtime, "adVmap", playlistValue.adVmap);

    auto tracks = jsi::Array(runtime, playlistValue.tracks.size());
    size_t tracksIndex = 0;
    for (auto tracksValue : playlistValue.tracks) {
      auto tracksObject = jsi::Object(runtime);
      tracksObject.setProperty(runtime, "file", tracksValue.file);
tracksObject.setProperty(runtime, "label", tracksValue.label);
tracksObject.setProperty(runtime, "default", tracksValue.default);
      tracks.setValueAtIndex(runtime, tracksIndex++, tracksObject);
    }
    playlistObject.setProperty(runtime, "tracks", tracks);
  
playlistObject.setProperty(runtime, "recommendations", playlistValue.recommendations);
playlistObject.setProperty(runtime, "startTime", playlistValue.startTime);
playlistObject.setProperty(runtime, "autostart", playlistValue.autostart);
      playlist.setValueAtIndex(runtime, playlistIndex++, playlistObject);
    }
    $payload.setProperty(runtime, "playlist", playlist);
  
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onBeforePlay(OnBeforePlay $event) const {
  dispatchEvent("beforePlay", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onBeforeComplete(OnBeforeComplete $event) const {
  dispatchEvent("beforeComplete", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onComplete(OnComplete $event) const {
  dispatchEvent("complete", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onPlay(OnPlay $event) const {
  dispatchEvent("play", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onPause(OnPause $event) const {
  dispatchEvent("pause", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onSeek(OnSeek $event) const {
  dispatchEvent("seek", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "position", $event.position);
$payload.setProperty(runtime, "offset", $event.offset);
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onSeeked(OnSeeked $event) const {
  dispatchEvent("seeked", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "position", $event.position);
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onRateChanged(OnRateChanged $event) const {
  dispatchEvent("rateChanged", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "rate", $event.rate);
$payload.setProperty(runtime, "at", $event.at);
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onSetupPlayerError(OnSetupPlayerError $event) const {
  dispatchEvent("setupPlayerError", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "code", $event.code);
$payload.setProperty(runtime, "error", $event.error);
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onPlayerError(OnPlayerError $event) const {
  dispatchEvent("playerError", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "code", $event.code);
$payload.setProperty(runtime, "error", $event.error);
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onPlayerWarning(OnPlayerWarning $event) const {
  dispatchEvent("playerWarning", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "code", $event.code);
$payload.setProperty(runtime, "warning", $event.warning);
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onPlayerAdError(OnPlayerAdError $event) const {
  dispatchEvent("playerAdError", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "code", $event.code);
$payload.setProperty(runtime, "error", $event.error);
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onPlayerAdWarning(OnPlayerAdWarning $event) const {
  dispatchEvent("playerAdWarning", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "code", $event.code);
$payload.setProperty(runtime, "warning", $event.warning);
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onAdEvent(OnAdEvent $event) const {
  dispatchEvent("adEvent", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "client", $event.client);
$payload.setProperty(runtime, "reason", $event.reason);
$payload.setProperty(runtime, "type", $event.type);
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onAdTime(OnAdTime $event) const {
  dispatchEvent("adTime", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "position", $event.position);
$payload.setProperty(runtime, "duration", $event.duration);
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onBuffer(OnBuffer $event) const {
  dispatchEvent("buffer", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onTime(OnTime $event) const {
  dispatchEvent("time", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "position", $event.position);
$payload.setProperty(runtime, "duration", $event.duration);
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onFullScreenRequested(OnFullScreenRequested $event) const {
  dispatchEvent("fullScreenRequested", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onFullScreen(OnFullScreen $event) const {
  dispatchEvent("fullScreen", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onFullScreenExitRequested(OnFullScreenExitRequested $event) const {
  dispatchEvent("fullScreenExitRequested", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onFullScreenExit(OnFullScreenExit $event) const {
  dispatchEvent("fullScreenExit", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onControlBarVisible(OnControlBarVisible $event) const {
  dispatchEvent("controlBarVisible", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "visible", $event.visible);
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onPlaylistComplete(OnPlaylistComplete $event) const {
  dispatchEvent("playlistComplete", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onPlaylistItem(OnPlaylistItem $event) const {
  dispatchEvent("playlistItem", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    {
  auto playlistItem = jsi::Object(runtime);
  playlistItem.setProperty(runtime, "file", $event.playlistItem.file);

      auto sources = jsi::Array(runtime, $event.playlistItem.sources.size());
      size_t sourcesIndex = 0;
      for (auto sourcesValue : $event.playlistItem.sources) {
        auto sourcesObject = jsi::Object(runtime);
        sourcesObject.setProperty(runtime, "file", sourcesValue.file);
  sourcesObject.setProperty(runtime, "label", sourcesValue.label);
  sourcesObject.setProperty(runtime, "default", sourcesValue.default);
        sources.setValueAtIndex(runtime, sourcesIndex++, sourcesObject);
      }
      playlistItem.setProperty(runtime, "sources", sources);
    
  playlistItem.setProperty(runtime, "image", $event.playlistItem.image);
  playlistItem.setProperty(runtime, "title", $event.playlistItem.title);
  playlistItem.setProperty(runtime, "description", $event.playlistItem.description);
  playlistItem.setProperty(runtime, "mediaId", $event.playlistItem.mediaId);

      auto adSchedule = jsi::Array(runtime, $event.playlistItem.adSchedule.size());
      size_t adScheduleIndex = 0;
      for (auto adScheduleValue : $event.playlistItem.adSchedule) {
        auto adScheduleObject = jsi::Object(runtime);
        adScheduleObject.setProperty(runtime, "tag", adScheduleValue.tag);
  adScheduleObject.setProperty(runtime, "offset", adScheduleValue.offset);
        adSchedule.setValueAtIndex(runtime, adScheduleIndex++, adScheduleObject);
      }
      playlistItem.setProperty(runtime, "adSchedule", adSchedule);
    
  playlistItem.setProperty(runtime, "adVmap", $event.playlistItem.adVmap);

      auto tracks = jsi::Array(runtime, $event.playlistItem.tracks.size());
      size_t tracksIndex = 0;
      for (auto tracksValue : $event.playlistItem.tracks) {
        auto tracksObject = jsi::Object(runtime);
        tracksObject.setProperty(runtime, "file", tracksValue.file);
  tracksObject.setProperty(runtime, "label", tracksValue.label);
  tracksObject.setProperty(runtime, "default", tracksValue.default);
        tracks.setValueAtIndex(runtime, tracksIndex++, tracksObject);
      }
      playlistItem.setProperty(runtime, "tracks", tracks);
    
  playlistItem.setProperty(runtime, "recommendations", $event.playlistItem.recommendations);
  playlistItem.setProperty(runtime, "startTime", $event.playlistItem.startTime);
  playlistItem.setProperty(runtime, "autostart", $event.playlistItem.autostart);
  $payload.setProperty(runtime, "playlistItem", playlistItem);
}
    return $payload;
  });
}


void RNJWPlayerEventEmitter::onAudioTracks(OnAudioTracks $event) const {
  dispatchEvent("audioTracks", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}

} // namespace react
} // namespace facebook
